@using Net.Codecrete.QrCodeGenerator
@using System.Text

@MarkupString

@code {
    /// <summary>
    /// Sets the error correction level for the QR code, which enables it to be decoded even if partially damaged or obscured. Default is <see cref="ErrorCorrection.Low" />
    /// </summary>
    [Parameter] public ErrorCorrection ErrorCorrection { get; set; } = ErrorCorrection.Low;
    /// <summary>
    /// The data to be encoded into the QR code.
    /// </summary>
    [Parameter] public string Data { get; set; } = string.Empty;
    /// <summary>
    /// Sets the width and height of the generated SVG. Default is "100%".
    /// </summary>
    [Parameter] public string Size { get; set; } = "100%";
    /// <summary>
    /// The number of empty cells as padding around the QR code. Default is 1.
    /// </summary>
    [Parameter] public int PaddingCells { get; set; } = 1;
    /// <summary>
    /// Sets the foreground color of the QR code. Default is "#000000" (black).
    /// </summary>
    [Parameter] public string ForeColor { get; set; } = "#000000";
    /// <summary>
    /// Sets the background color of the QR code. Default is "#ffffff" (white).
    /// </summary>
    [Parameter] public string BackColor { get; set; } = "#ffffff";
    /// <summary>
    /// Provides an accessible description for the QR code, enhancing usability for screen reader users.
    /// This description is used as the aria-label attribute value of the QR code's SVG element,
    /// offering context or details about the QR code's content or purpose.
    /// The default value is "QR Code".
    /// </summary>
    [Parameter] public string AriaDescription { get; set; } = "QR Code";
    /// <summary>
    /// Optional CSS class to be applied to the QR code container. Default is null.
    /// </summary>
    [Parameter] public string? Class { get; set; }
    /// <summary>
    /// Optional ID to be applied to the QR code container. Default is null.
    /// </summary>
    [Parameter] public string? Id { get; set; }

    MarkupString MarkupString { get; set; }

    const string SvgTagPart1 = "<svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" viewbox=\"0 0 ";
    const string SvgTagPart2 = "\" stroke=\"none\" width=\"";
    const string SvgTagPart3 = "\" height=\"";
    const string SvgTagPart4 = "\" role=\"img\" aria-label=\"";
    const string SvgTagPart5 = "\">";
    const string RectTagPart1 = "<rect width=\"100%\" height=\"100%\" fill=\"";
    const string RectTagPart2 = "\"></rect>";
    const string PathTagPart1 = "<path d=\"";
    const string PathTagPart2 = "\" fill=\"";
    const string PathTagPart3 = "\"></path>";
    const string ClosingTag = "</svg>";

    QrCode.Ecc GetEcc => ErrorCorrection switch
    {
        ErrorCorrection.Low => QrCode.Ecc.Low,
        ErrorCorrection.Medium => QrCode.Ecc.Medium,
        ErrorCorrection.Quartile => QrCode.Ecc.Quartile,
        ErrorCorrection.High => QrCode.Ecc.High,
        _ => throw new Exception($"Invalid value assigned to {nameof(ErrorCorrection)}")
    };

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        GenerateQR();
    }

    void GenerateQR()
    {
        var qr = QrCode.EncodeText(Data, GetEcc);
        var path = qr.ToGraphicsPath(PaddingCells);
        var viewboxSize = qr.Size + PaddingCells * 2;

        var sb = new StringBuilder();
        sb.Append(SvgTagPart1)
            .Append(viewboxSize)
            .Append(" ")
            .Append(viewboxSize)
            .Append(SvgTagPart2)
            .Append(Size)
            .Append(SvgTagPart3)
            .Append(Size)
            .Append(SvgTagPart4)
            .Append(AriaDescription);

        if(Id is not null)
        {
            sb.Append("\"")
                .Append(" id=\"")
                .Append(Id);
        }

        if(Class is not null)
        {
            sb.Append("\"")
                .Append(" class=\"")
                .Append(Class);
        }

        sb.AppendLine(SvgTagPart5)
            .Append(RectTagPart1)
            .Append(BackColor)
            .AppendLine(RectTagPart2)
            .Append(PathTagPart1)
            .Append(path)
            .Append(PathTagPart2)
            .Append(ForeColor)
            .AppendLine(PathTagPart3)
            .AppendLine(ClosingTag);

        MarkupString = new MarkupString(sb.ToString());
    }
}